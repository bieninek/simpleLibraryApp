-- Authors table
CREATE TABLE authors (
  author_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  birth_date DATE,
  biography TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX idx_author_name (last_name, first_name) -- Index for searching by author name
) ENGINE=InnoDB;

-- Publishers table
CREATE TABLE publishers (
  publisher_id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  address TEXT,
  phone VARCHAR(20),
  email VARCHAR(100),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE INDEX idx_publisher_name (name) -- Index for unique publisher name lookups
) ENGINE=InnoDB;

-- Books table
CREATE TABLE books (
  book_id INT AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  isbn VARCHAR(20) UNIQUE,
  publisher_id INT,
  publication_year YEAR,
  language VARCHAR(50) DEFAULT 'English',
  page_count INT,
  description TEXT,
  available_copies INT NOT NULL DEFAULT 0,
  total_copies INT NOT NULL DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (publisher_id) REFERENCES publishers(publisher_id) ON DELETE SET NULL,
  FULLTEXT INDEX idx_book_search (title, description), -- Fulltext search on title and description
  INDEX idx_book_isbn (isbn), -- For ISBN lookups
  INDEX idx_book_availability (available_copies) -- For finding available books quickly
) ENGINE=InnoDB;

-- Book-Author relationship (many-to-many)
CREATE TABLE book_authors (
  book_id INT NOT NULL,
  author_id INT NOT NULL,
  PRIMARY KEY (book_id, author_id),
  FOREIGN KEY (book_id) REFERENCES books(book_id) ON DELETE CASCADE,
  FOREIGN KEY (author_id) REFERENCES authors(author_id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Categories/Genres table
CREATE TABLE categories (
  category_id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE INDEX idx_category_name (name)
) ENGINE=InnoDB;

-- Book-Category relationship (many-to-many)
CREATE TABLE book_categories (
  book_id INT NOT NULL,
  category_id INT NOT NULL,
  PRIMARY KEY (book_id, category_id),
  FOREIGN KEY (book_id) REFERENCES books(book_id) ON DELETE CASCADE,
  FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Members table
CREATE TABLE members (
  member_id INT AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  phone VARCHAR(20),
  address TEXT,
  registration_date DATE NOT NULL DEFAULT (CURRENT_DATE),
  membership_status ENUM('active', 'expired', 'suspended') DEFAULT 'active',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX idx_member_name (last_name, first_name), -- For searching members by name
  INDEX idx_member_status (membership_status) -- For filtering members by status
) ENGINE=InnoDB;

-- Borrowing/Loans table
CREATE TABLE borrowings (
  borrowing_id INT AUTO_INCREMENT PRIMARY KEY,
  book_id INT NOT NULL,
  member_id INT NOT NULL,
  borrow_date DATE NOT NULL DEFAULT (CURRENT_DATE),
  due_date DATE NOT NULL,
  return_date DATE,
  fine_amount DECIMAL(10,2) DEFAULT 0.00,
  status ENUM('borrowed', 'returned', 'overdue', 'lost') DEFAULT 'borrowed',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (book_id) REFERENCES books(book_id) ON DELETE RESTRICT,
  FOREIGN KEY (member_id) REFERENCES members(member_id) ON DELETE RESTRICT,
  INDEX idx_borrowing_dates (borrow_date, due_date, return_date), -- For date range queries
  INDEX idx_borrowing_status (status) -- For filtering by status
) ENGINE=InnoDB;

-- Book Reservations table // tabela reservations jest nieuzywana
CREATE TABLE reservations (
  reservation_id INT AUTO_INCREMENT PRIMARY KEY,
  book_id INT NOT NULL,
  member_id INT NOT NULL,
  reservation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  expiry_date DATE NOT NULL,
  status ENUM('pending', 'fulfilled', 'cancelled', 'expired') DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (book_id) REFERENCES books(book_id) ON DELETE CASCADE,
  FOREIGN KEY (member_id) REFERENCES members(member_id) ON DELETE CASCADE,
  INDEX idx_reservation_status (status), -- For filtering by status
  INDEX idx_reservation_dates (reservation_date, expiry_date) -- For date range queries
) ENGINE=InnoDB;

-- Database triggers
-- Trigger to update available_copies when a book is borrowed
DELIMITER //
CREATE TRIGGER after_borrowing_insert
AFTER INSERT ON borrowings
FOR EACH ROW
BEGIN
  UPDATE books
  SET available_copies = available_copies - 1
  WHERE book_id = NEW.book_id;
END //
DELIMITER ;

-- Trigger to update available_copies when a book is returned
DELIMITER //
CREATE TRIGGER after_borrowing_update
AFTER UPDATE ON borrowings
FOR EACH ROW
BEGIN
  IF NEW.status = 'returned' AND OLD.status != 'returned' THEN
    UPDATE books
    SET available_copies = available_copies + 1
    WHERE book_id = NEW.book_id;
  END IF;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE UpdateOverdueFines(IN fine_per_day DECIMAL(10,2))
BEGIN
    UPDATE borrowings
    SET fine_amount = DATEDIFF(CURDATE(), due_date) * fine_per_day
    WHERE status = 'overdue'
      AND return_date IS NULL;
END //
DELIMITER ;

-- Insert some sample data
INSERT INTO authors (first_name, last_name, birth_date) VALUES
('J.K.', 'Rowling', '1965-07-31'),
('George', 'Orwell', '1903-06-25'),
('Jane', 'Austen', '1775-12-16');

INSERT INTO publishers (name, email) VALUES
('Penguin Books', 'info@penguin.com'),
('Bloomsbury', 'contact@bloomsbury.com');

INSERT INTO categories (name) VALUES
('Fiction'),
('Science Fiction'),
('Fantasy'),
('Classic'),
('Non-fiction');

INSERT INTO members (first_name, last_name, email, phone) VALUES
('John', 'Doe', 'john.doe@example.com', '555-1234'),
('Jane', 'Smith', 'jane.smith@example.com', '555-5678');

-- Add some books and relationships after

-- Fiction books
INSERT INTO books (title, isbn, publisher_id, publication_year, language, page_count, description, available_copies, total_copies)
VALUES ('The Silent Patient', '9781250301697', 1, 2019, 'English', 336, 'A psychological thriller about a woman who shoots her husband and then stops speaking.', 5, 10);

INSERT INTO books (title, isbn, publisher_id, publication_year, language, page_count, description, available_copies, total_copies)
VALUES ('To Kill a Mockingbird', '9780061120084', 2, 1960, 'English', 336, 'A classic novel about racial injustice and moral growth in the American South.', 3, 8);

-- Non-fiction books
INSERT INTO books (title, isbn, publisher_id, publication_year, language, page_count, description, available_copies, total_copies)
VALUES ('Atomic Habits', '9780735211292', 1, 2018, 'English', 320, 'An easy and proven way to build good habits and break bad ones.', 0, 5);

-- International language books
INSERT INTO books (title, isbn, publisher_id, publication_year, language, page_count, description, available_copies, total_copies)
VALUES ('One Hundred Years of Solitude', '9780060883287', 1, 1967, 'Spanish', 417, 'The multi-generational story of the Buend√≠a family in the fictional town of Macondo.', 1, 3);

-- Technical books
INSERT INTO books (title, isbn, publisher_id, publication_year, language, page_count, description, available_copies, total_copies)
VALUES ('Learning MySQL', '9780596008642', 1, 2007, 'English', 622, 'A comprehensive guide to working with MySQL databases.', 4, 6);

-- Recent publications with no ISBN yet
INSERT INTO books (title, publisher_id, publication_year, language, page_count, description, available_copies, total_copies)
VALUES ('Data Science Fundamentals', 2, 2023, 'English', 480, 'A modern approach to data analysis, machine learning, and AI applications.', 10, 10);

-- Books with all copies checked out
INSERT INTO books (title, isbn, publisher_id, publication_year, language, page_count, description, available_copies, total_copies)
VALUES ('The Midnight Library', '9780525559474', 2, 2020, 'English', 304, 'A novel about a library beyond the edge of the universe that contains books of alternate lives.', 0, 4);

INSERT INTO book_authors (book_id, author_id) VALUES (1, 2);
INSERT INTO book_authors (book_id, author_id) VALUES (2, 1);
INSERT INTO book_authors (book_id, author_id) VALUES (3, 1);
INSERT INTO book_authors (book_id, author_id) VALUES (4, 4);
INSERT INTO book_authors (book_id, author_id) VALUES (1, 8);
INSERT INTO book_authors (book_id, author_id) VALUES (3, 9);
INSERT INTO book_authors (book_id, author_id) VALUES (4, 10);
INSERT INTO book_authors (book_id, author_id) VALUES (2, 11;